{"version":3,"file":"app.e07b25b2400fc0c6d78b.hot-update.js","sources":["webpack:///./public/app/plugins/panel/graph/module.ts"],"sourcesContent":["import './graph';\r\nimport './legend';\r\nimport './series_overrides_ctrl';\r\nimport './thresholds_form';\r\n\r\nimport template from './template';\r\nimport _ from 'lodash';\r\nimport config from 'app/core/config';\r\nimport { MetricsPanelCtrl, alertTab } from 'app/plugins/sdk';\r\nimport { DataProcessor } from './data_processor';\r\nimport { axesEditorComponent } from './axes_editor';\r\n\r\nclass GraphCtrl extends MetricsPanelCtrl {\r\n  static template = template;\r\n\r\n  renderError: boolean;\r\n  hiddenSeries: any = {};\r\n  seriesList: any = [];\r\n  dataList: any = [];\r\n  annotations: any = [];\r\n  alertState: any;\r\n\r\n  annotationsPromise: any;\r\n  dataWarning: any;\r\n  colors: any = [];\r\n  subTabIndex: number;\r\n  processor: DataProcessor;\r\n\r\n  panelDefaults = {\r\n    // datasource name, null = default datasource\r\n    datasource: null,\r\n    // sets client side (flot) or native graphite png renderer (png)\r\n    renderer: 'flot',\r\n    yaxes: [\r\n      {\r\n        label: null,\r\n        show: true,\r\n        logBase: 1,\r\n        min: null,\r\n        max: null,\r\n        format: 'short',\r\n      },\r\n      {\r\n        label: null,\r\n        show: true,\r\n        logBase: 1,\r\n        min: null,\r\n        max: null,\r\n        format: 'short',\r\n      },\r\n    ],\r\n    xaxis: {\r\n      show: true,\r\n      mode: 'time',\r\n      name: null,\r\n      values: [],\r\n      buckets: null,\r\n    },\r\n    yaxis: {\r\n      align: false,\r\n      alignLevel: null,\r\n    },\r\n    // show/hide lines\r\n    lines: true,\r\n    // fill factor\r\n    fill: 1,\r\n    // line width in pixels\r\n    linewidth: 1,\r\n    // show/hide dashed line\r\n    dashes: false,\r\n    // length of a dash\r\n    dashLength: 10,\r\n    // length of space between two dashes\r\n    spaceLength: 10,\r\n    // show hide points\r\n    points: false,\r\n    // point radius in pixels\r\n    pointradius: 5,\r\n    // show hide bars\r\n    bars: false,\r\n    // enable/disable stacking\r\n    stack: false,\r\n    // stack percentage mode\r\n    percentage: false,\r\n    // legend options\r\n    legend: {\r\n      show: true, // disable/enable legend\r\n      values: false, // disable/enable legend values\r\n      min: false,\r\n      max: false,\r\n      current: false,\r\n      total: false,\r\n      avg: false,\r\n    },\r\n    // how null points should be handled\r\n    nullPointMode: 'null',\r\n    // staircase line mode\r\n    steppedLine: false,\r\n    // tooltip options\r\n    tooltip: {\r\n      value_type: 'individual',\r\n      shared: true,\r\n      sort: 0,\r\n    },\r\n    // time overrides\r\n    timeFrom: null,\r\n    timeShift: null,\r\n    // metric queries\r\n    targets: [{}],\r\n    // series color overrides\r\n    aliasColors: {},\r\n    // other style overrides\r\n    seriesOverrides: [],\r\n    thresholds: [],\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, private $rootScope, private annotationsSrv, timeSrv) {\r\n    super($scope, $injector);\r\n\r\n    _.defaults(this.panel, this.panelDefaults);\r\n    _.defaults(this.panel.tooltip, this.panelDefaults.tooltip);\r\n    _.defaults(this.panel.legend, this.panelDefaults.legend);\r\n    _.defaults(this.panel.xaxis, this.panelDefaults.xaxis);\r\n\r\n    this.processor = new DataProcessor(this.panel);\r\n\r\n    this.events.on('render', this.onRender.bind(this));\r\n    this.events.on('data-received', this.onDataReceived.bind(this));\r\n    this.events.on('data-error', this.onDataError.bind(this));\r\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.addEditorTab('Display', 'public/app/plugins/panel/graph/tab_display.html', 4);\r\n    this.addEditorTab('Axes', axesEditorComponent, 2);\r\n    this.addEditorTab('Legend', 'public/app/plugins/panel/graph/tab_legend.html', 3);\r\n\r\n    if (config.alertingEnabled) {\r\n      this.addEditorTab('Alert', alertTab, 5);\r\n    }\r\n\r\n    this.subTabIndex = 0;\r\n  }\r\n\r\n  onInitPanelActions(actions) {\r\n    actions.push({ text: 'Export CSV', click: 'ctrl.exportCsv()' });\r\n    actions.push({ text: 'Toggle legend', click: 'ctrl.toggleLegend()' });\r\n  }\r\n\r\n  issueQueries(datasource) {\r\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\r\n      dashboard: this.dashboard,\r\n      panel: this.panel,\r\n      range: this.range,\r\n    });\r\n\r\n    /* Wait for annotationSrv requests to get datasources to\r\n     * resolve before issuing queries. This allows the annotations\r\n     * service to fire annotations queries before graph queries\r\n     * (but not wait for completion). This resolves\r\n     * issue 11806.\r\n     */\r\n    return this.annotationsSrv.datasourcePromises.then(r => {\r\n      return super.issueQueries(datasource);\r\n    });\r\n  }\r\n\r\n  zoomOut(evt) {\r\n    this.publishAppEvent('zoom-out', 2);\r\n  }\r\n\r\n  toggleRefresh(mode) {\r\n    if (mode) {\r\n      this.timeSrv.setAutoRefresh('1s');\r\n    } else {\r\n      this.timeSrv.setAutoRefresh(undefined);\r\n    }\r\n  }\r\n\r\n  onDataSnapshotLoad(snapshotData) {\r\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\r\n      dashboard: this.dashboard,\r\n      panel: this.panel,\r\n      range: this.range,\r\n    });\r\n    this.onDataReceived(snapshotData);\r\n  }\r\n\r\n  onDataError(err) {\r\n    this.seriesList = [];\r\n    this.annotations = [];\r\n    this.render([]);\r\n  }\r\n\r\n  onDataReceived(dataList) {\r\n    this.dataList = dataList;\r\n    this.seriesList = this.processor.getSeriesList({\r\n      dataList: dataList,\r\n      range: this.range,\r\n    });\r\n\r\n    this.dataWarning = null;\r\n    const datapointsCount = this.seriesList.reduce((prev, series) => {\r\n      return prev + series.datapoints.length;\r\n    }, 0);\r\n\r\n    if (datapointsCount === 0) {\r\n      this.dataWarning = {\r\n        title: 'No data points',\r\n        tip: 'No datapoints returned from data query',\r\n      };\r\n    } else {\r\n      for (const series of this.seriesList) {\r\n        if (series.isOutsideRange) {\r\n          this.dataWarning = {\r\n            title: 'Data points outside time range',\r\n            tip: 'Can be caused by timezone mismatch or missing time filter in query',\r\n          };\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.annotationsPromise.then(\r\n      result => {\r\n        this.loading = false;\r\n        this.alertState = result.alertState;\r\n        this.annotations = result.annotations;\r\n        this.render(this.seriesList);\r\n      },\r\n      () => {\r\n        this.loading = false;\r\n        this.render(this.seriesList);\r\n      }\r\n    );\r\n  }\r\n\r\n  onRender() {\r\n    if (!this.seriesList) {\r\n      return;\r\n    }\r\n\r\n    for (const series of this.seriesList) {\r\n      series.applySeriesOverrides(this.panel.seriesOverrides);\r\n\r\n      if (series.unit) {\r\n        this.panel.yaxes[series.yaxis - 1].format = series.unit;\r\n      }\r\n    }\r\n  }\r\n\r\n  changeSeriesColor(series, color) {\r\n    series.setColor(color);\r\n    this.panel.aliasColors[series.alias] = series.color;\r\n    this.render();\r\n  }\r\n\r\n  toggleSeries(serie, event) {\r\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\r\n      if (this.hiddenSeries[serie.alias]) {\r\n        delete this.hiddenSeries[serie.alias];\r\n      } else {\r\n        this.hiddenSeries[serie.alias] = true;\r\n      }\r\n    } else {\r\n      this.toggleSeriesExclusiveMode(serie);\r\n    }\r\n    this.render();\r\n  }\r\n\r\n  toggleSeriesExclusiveMode(serie) {\r\n    const hidden = this.hiddenSeries;\r\n\r\n    if (hidden[serie.alias]) {\r\n      delete hidden[serie.alias];\r\n    }\r\n\r\n    // check if every other series is hidden\r\n    const alreadyExclusive = _.every(this.seriesList, value => {\r\n      if (value.alias === serie.alias) {\r\n        return true;\r\n      }\r\n\r\n      return hidden[value.alias];\r\n    });\r\n\r\n    if (alreadyExclusive) {\r\n      // remove all hidden series\r\n      _.each(this.seriesList, value => {\r\n        delete this.hiddenSeries[value.alias];\r\n      });\r\n    } else {\r\n      // hide all but this serie\r\n      _.each(this.seriesList, value => {\r\n        if (value.alias === serie.alias) {\r\n          return;\r\n        }\r\n\r\n        this.hiddenSeries[value.alias] = true;\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleAxis(info) {\r\n    let override = _.find(this.panel.seriesOverrides, { alias: info.alias });\r\n    if (!override) {\r\n      override = { alias: info.alias };\r\n      this.panel.seriesOverrides.push(override);\r\n    }\r\n    info.yaxis = override.yaxis = info.yaxis === 2 ? 1 : 2;\r\n    this.render();\r\n  }\r\n\r\n  addSeriesOverride(override) {\r\n    this.panel.seriesOverrides.push(override || {});\r\n  }\r\n\r\n  removeSeriesOverride(override) {\r\n    this.panel.seriesOverrides = _.without(this.panel.seriesOverrides, override);\r\n    this.render();\r\n  }\r\n\r\n  toggleLegend() {\r\n    this.panel.legend.show = !this.panel.legend.show;\r\n    this.refresh();\r\n  }\r\n\r\n  legendValuesOptionChanged() {\r\n    const legend = this.panel.legend;\r\n    legend.values = legend.min || legend.max || legend.avg || legend.current || legend.total;\r\n    this.render();\r\n  }\r\n\r\n  exportCsv() {\r\n    const scope = this.$scope.$new(true);\r\n    scope.seriesList = this.seriesList;\r\n    this.publishAppEvent('show-modal', {\r\n      templateHtml: '<export-data-modal data=\"seriesList\"></export-data-modal>',\r\n      scope,\r\n      modalClass: 'modal--narrow',\r\n    });\r\n  }\r\n}\r\n\r\nexport { GraphCtrl, GraphCtrl as PanelCtrl };\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAwGA;AACA;AAAA;AAAA;AAAA;AArGA;AACA;AACA;AACA;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3UA;AA4UA;AAAA;AAEA;;;;;A","sourceRoot":""}