{"version":3,"file":"app.44db7b0cd698fb2527bc.hot-update.js","sources":["webpack:///./public/app/features/templating/template_srv.ts"],"sourcesContent":["import kbn from 'app/core/utils/kbn';\r\nimport _ from 'lodash';\r\n\r\nfunction luceneEscape(value) {\r\n  return value.replace(/([\\!\\*\\+\\-\\=<>\\s\\&\\|\\(\\)\\[\\]\\{\\}\\^\\~\\?\\:\\\\/\"])/g, '\\\\$1');\r\n}\r\n\r\nexport class TemplateSrv {\r\n  variables: any[];\r\n\r\n  /*\r\n   * This regex matches 3 types of variable reference with an optional format specifier\r\n   * \\$(\\w+)                          $var1\r\n   * \\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]    [[var2]] or [[var2:fmt2]]\r\n   * \\${(\\w+)(?::(\\w+))?}             ${var3} or ${var3:fmt3}\r\n   */\r\n  private regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]|\\${(\\w+)(?::(\\w+))?}/g;\r\n  private index = {};\r\n  private grafanaVariables = {};\r\n  private builtIns = {};\r\n\r\n  constructor() {\r\n    this.builtIns['__interval'] = { text: '1s', value: '1s' };\r\n    this.builtIns['__interval_ms'] = { text: '100', value: '100' };\r\n  }\r\n\r\n  init(variables) {\r\n    this.variables = variables;\r\n    this.updateTemplateData();\r\n  }\r\n  \r\n  getVarFromIndex(){\r\n\t  return this.index;\r\n  }\r\n\r\n  updateTemplateData() {\r\n    this.index = {};\r\n\r\n    for (let i = 0; i < this.variables.length; i++) {\r\n      const variable = this.variables[i];\r\n\r\n      if (!variable.current || (!variable.current.isNone && !variable.current.value)) {\r\n        continue;\r\n      }\r\n\r\n      this.index[variable.name] = variable;\r\n    }\r\n  }\r\n\r\n  variableInitialized(variable) {\r\n    this.index[variable.name] = variable;\r\n  }\r\n\r\n  getAdhocFilters(datasourceName) {\r\n    let filters = [];\r\n\r\n    if (this.variables) {\r\n      for (let i = 0; i < this.variables.length; i++) {\r\n        const variable = this.variables[i];\r\n        if (variable.type !== 'adhoc') {\r\n          continue;\r\n        }\r\n\r\n        // null is the \"default\" datasource\r\n        if (variable.datasource === null || variable.datasource === datasourceName) {\r\n          filters = filters.concat(variable.filters);\r\n        } else if (variable.datasource.indexOf('$') === 0) {\r\n          if (this.replace(variable.datasource) === datasourceName) {\r\n            filters = filters.concat(variable.filters);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return filters;\r\n  }\r\n\r\n  luceneFormat(value) {\r\n    if (typeof value === 'string') {\r\n      return luceneEscape(value);\r\n    }\r\n    if (value instanceof Array && value.length === 0) {\r\n      return '__empty__';\r\n    }\r\n    const quotedValues = _.map(value, val => {\r\n      return '\"' + luceneEscape(val) + '\"';\r\n    });\r\n    return '(' + quotedValues.join(' OR ') + ')';\r\n  }\r\n\r\n  formatValue(value, format, variable) {\r\n    // for some scopedVars there is no variable\r\n    variable = variable || {};\r\n\r\n    if (typeof format === 'function') {\r\n      return format(value, variable, this.formatValue);\r\n    }\r\n\r\n    switch (format) {\r\n      case 'regex': {\r\n        if (typeof value === 'string') {\r\n          return kbn.regexEscape(value);\r\n        }\r\n\r\n        const escapedValues = _.map(value, kbn.regexEscape);\r\n        if (escapedValues.length === 1) {\r\n          return escapedValues[0];\r\n        }\r\n        return '(' + escapedValues.join('|') + ')';\r\n      }\r\n      case 'lucene': {\r\n        return this.luceneFormat(value);\r\n      }\r\n      case 'pipe': {\r\n        if (typeof value === 'string') {\r\n          return value;\r\n        }\r\n        return value.join('|');\r\n      }\r\n      case 'distributed': {\r\n        if (typeof value === 'string') {\r\n          return value;\r\n        }\r\n        return this.distributeVariable(value, variable.name);\r\n      }\r\n      case 'csv': {\r\n        if (_.isArray(value)) {\r\n          return value.join(',');\r\n        }\r\n        return value;\r\n      }\r\n      default: {\r\n        if (_.isArray(value)) {\r\n          return '{' + value.join(',') + '}';\r\n        }\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n\r\n  setGrafanaVariable(name, value) {\r\n    this.grafanaVariables[name] = value;\r\n  }\r\n\r\n  getVariableName(expression) {\r\n    this.regex.lastIndex = 0;\r\n    const match = this.regex.exec(expression);\r\n    if (!match) {\r\n      return null;\r\n    }\r\n    return match[1] || match[2];\r\n  }\r\n\r\n  variableExists(expression) {\r\n    const name = this.getVariableName(expression);\r\n    return name && this.index[name] !== void 0;\r\n  }\r\n\r\n  highlightVariablesAsHtml(str) {\r\n    if (!str || !_.isString(str)) {\r\n      return str;\r\n    }\r\n\r\n    str = _.escape(str);\r\n    this.regex.lastIndex = 0;\r\n    return str.replace(this.regex, (match, var1, var2, fmt2, var3) => {\r\n      if (this.index[var1 || var2 || var3] || this.builtIns[var1 || var2 || var3]) {\r\n        return '<span class=\"template-variable\">' + match + '</span>';\r\n      }\r\n      return match;\r\n    });\r\n  }\r\n\r\n  getAllValue(variable) {\r\n    if (variable.allValue) {\r\n      return variable.allValue;\r\n    }\r\n    const values = [];\r\n    for (let i = 1; i < variable.options.length; i++) {\r\n      values.push(variable.options[i].value);\r\n    }\r\n    return values;\r\n  }\r\n\r\n  replace(target, scopedVars?, format?) {\r\n    if (!target) {\r\n      return target;\r\n    }\r\n\r\n    let variable, systemValue, value, fmt;\r\n    this.regex.lastIndex = 0;\r\n\r\n    return target.replace(this.regex, (match, var1, var2, fmt2, var3, fmt3) => {\r\n      variable = this.index[var1 || var2 || var3];\r\n      fmt = fmt2 || fmt3 || format;\r\n      if (scopedVars) {\r\n        value = scopedVars[var1 || var2 || var3];\r\n        if (value) {\r\n          return this.formatValue(value.value, fmt, variable);\r\n        }\r\n      }\r\n\r\n      if (!variable) {\r\n        return match;\r\n      }\r\n\r\n      systemValue = this.grafanaVariables[variable.current.value];\r\n      if (systemValue) {\r\n        return this.formatValue(systemValue, fmt, variable);\r\n      }\r\n\r\n      value = variable.current.value;\r\n      if (this.isAllValue(value)) {\r\n        value = this.getAllValue(variable);\r\n        // skip formatting of custom all values\r\n        if (variable.allValue) {\r\n          return this.replace(value);\r\n        }\r\n      }\r\n\r\n      const res = this.formatValue(value, fmt, variable);\r\n      return res;\r\n    });\r\n  }\r\n\r\n  isAllValue(value) {\r\n    return value === '$__all' || (Array.isArray(value) && value[0] === '$__all');\r\n  }\r\n\r\n  replaceWithText(target, scopedVars) {\r\n    if (!target) {\r\n      return target;\r\n    }\r\n\r\n    let variable;\r\n    this.regex.lastIndex = 0;\r\n\r\n    return target.replace(this.regex, (match, var1, var2, fmt2, var3) => {\r\n      if (scopedVars) {\r\n        const option = scopedVars[var1 || var2 || var3];\r\n        if (option) {\r\n          return option.text;\r\n        }\r\n      }\r\n\r\n      variable = this.index[var1 || var2 || var3];\r\n      if (!variable) {\r\n        return match;\r\n      }\r\n\r\n      return this.grafanaVariables[variable.current.value] || variable.current.text;\r\n    });\r\n  }\r\n\r\n  fillVariableValuesForUrl(params, scopedVars) {\r\n    _.each(this.variables, variable => {\r\n      if (scopedVars && scopedVars[variable.name] !== void 0) {\r\n        if (scopedVars[variable.name].skipUrlSync) {\r\n          return;\r\n        }\r\n        params['var-' + variable.name] = scopedVars[variable.name].value;\r\n      } else {\r\n        if (variable.skipUrlSync) {\r\n          return;\r\n        }\r\n        params['var-' + variable.name] = variable.getValueForUrl();\r\n      }\r\n    });\r\n  }\r\n\r\n  distributeVariable(value, variable) {\r\n    value = _.map(value, (val, index) => {\r\n      if (index !== 0) {\r\n        return variable + '=' + val;\r\n      } else {\r\n        return val;\r\n      }\r\n    });\r\n    return value.join(',');\r\n  }\r\n}\r\n\r\nexport default new TemplateSrv();\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAcA;AAXA;;;;;AAKA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAEA;;;;;A","sourceRoot":""}